---

- name: check if instances are already created fail if so
  ansible.builtin.shell:
    cmd: >
      {{setup.proxcli.path}} vms list --filter-name '^{{project}}-{{item.key}}' | wc -l
  delegate_to: localhost
  register: result
  loop: "{{provision_instances[project].instances | dict2items}}"
  failed_when: result.stdout != '1'

- name: create proxmox instances
  ansible.builtin.shell:
    cmd: >
      {{setup.proxcli.path}} vms clone 
      --vmid {{item.value.clone | default(provision_template.clone)}} 
      --name {{project}}-{{item.key}}
      {{item.value.block | default(provision_template.block) | ternary('--block', ' ')}}
      {{item.value.full_clone | default(provision_template.full_clone) | ternary('--full-clone', ' ')}}
      --duplicate {{item.value.count | default(provision_template.count)}}
      --vm-description '{{item.value.description | default("")}}'
      --storage {{item.value.disk_storage | default(provision_template.disk_storage)}}
      --strategy {{item.value.strategy | default(provision_template.strategy)}}
      --proxmox-nodes {{item.value.nodes | default(provision_template.nodes)}}
      --target {{item.value.target | default(provision_template.target)}}
  delegate_to: localhost
  loop: "{{provision_instances[project].instances | dict2items}}"

- name: wait a few seconds 
  ansible.builtin.shell: sleep 5
  delegate_to: localhost

- name: configure proxmox instances
  ansible.builtin.shell:
    cmd: > 
      {{setup.proxcli.path}} vms set 
      --filter-name '^{{project}}-{{item.key}}'
      --ciuser {{item.value.user | default(provision_template.user)}}
      --cipassword {{item.value.password | default(provision_template.password)}}
      --sshkey '{{lookup('ansible.builtin.file',provision_template.sshkey)}}'
      --ipconfig '{{item.value.ipconfig | default(provision_template.ipconfig)}}'
      --cores {{item.value.cores | default(provision_template.cores)}}
      --memory {{item.value.memory | default(provision_template.memory)}}
  delegate_to: localhost
  loop: "{{provision_instances[project].instances | dict2items}}"

- name: resize disk
  ansible.builtin.shell:
    cmd: > 
      {{setup.proxcli.path}} vms resize
      --filter-name '^{{project}}-{{item.key}}'
      --size '{{item.value.disk_size | default(provision_template.disk_size)}}'
  delegate_to: localhost
  loop: "{{provision_instances[project].instances | dict2items}}"

- name: set proxmox instances tags
  ansible.builtin.shell:
    cmd: > 
      {{setup.proxcli.path}} vms tags set 
      --filter-name '^{{project}}-{{item.key}}'
      --vm-tags {{item.value.tags | default(provision_template.tags) | join(',')}}
  delegate_to: localhost
  loop: "{{provision_instances[project].instances | dict2items}}"

- name: create ha groups
  ansible.builtin.shell:
    cmd: > 
      {{setup.proxcli.path}} cluster ha groups create
      --group {{project}}-{{item.key}}
      --proxmox-nodes {{item.value.nodes}}
      {{item.value.restricted | ternary('--restricted', ' ')}}
      {{item.value.nofailback | ternary('--nofailback', ' ')}}
  delegate_to: localhost
  loop: "{{provision_instances[project].ha_groups | dict2items}}"
  when: "'ha_groups' in provision_instances[project]"

- name: assign instances to ha groups
  ansible.builtin.shell:
    cmd: > 
      {{setup.proxcli.path}} cluster ha resources add
      --filter-name '^{{project}}-{{item.key}}'
      --group {{project}}-{{item.value.ha_group}}
      --max-restart {{provision_instances[project].ha_groups[item.value.ha_group].max_restart}}
      --max-relocate {{provision_instances[project].ha_groups[item.value.ha_group].max_restart}}      
  delegate_to: localhost
  loop: "{{provision_instances[project].instances | dict2items}}"
  when: "'ha_groups' in provision_instances[project] and 'ha_group' in item.value"